#!/usr/bin/env ruby

require 'open3'
require 'optparse'

class AudioSwitcher
  def initialize(cards)
    @cards = cards
  end

  def find_preferred_card
    # Priority: Bluetooth -> HDMI -> Analog
    @cards.find { |card| card.name.match?(/bluez_card/) && card.profiles.any? { |p| p[:name] == card.active_profile && p[:available] == "yes" } } ||
    @cards.find { |card| card.name.match?(/alsa_card/) && card.active_profile.start_with?("output:hdmi") && card.profiles.any? { |p| p[:name] == card.active_profile && p[:available] == "yes" } } ||
    @cards.find { |card| card.name.match?(/alsa_card/) && card.active_profile.start_with?("output:analog") && card.profiles.any? { |p| p[:name] == card.active_profile && p[:available] == "yes" } }
  end

  def set_audio(card, profile)
    system("pactl set-card-profile #{card.name} #{profile}")

    selected_sink = Open3.capture3("pactl list sinks short | grep #{card.name.gsub('card', 'output')} | awk '{print $2}'")[0]

    system("pactl set-default-sink #{selected_sink}")
  end

  def manual_selection
    puts "Available audio cards and profiles:"
    @cards.each_with_index do |card, i|
      puts "\nCard #{i + 1}: #{card.readable_name}"
      card.profiles.each_with_index do |profile, j|
        puts "  #{j + 1}. #{profile[:name]} (Available: #{profile[:available]})"
      end
    end

    loop do
      print "\nSelect card number (1-#{@cards.length}): "
      card_idx = gets.chomp.to_i - 1
      return nil unless card_idx.between?(0, @cards.length - 1)

      card = @cards[card_idx]
      print "Select profile number (1-#{card.profiles.length}): "
      profile_idx = gets.chomp.to_i - 1
      return nil unless profile_idx.between?(0, card.profiles.length - 1)

      profile = card.profiles[profile_idx]
      if profile[:available] == "yes"
        return [card, profile[:name]]
      else
        puts "Selected profile is not available. Please try again."
      end
    end
  end

  def run(manual: false)
    if manual
      selection = manual_selection
      if selection
        card, profile = selection
        set_audio(card, profile)
        puts "Set audio to card: #{card.name}, profile: #{profile}"
      else
        puts "Invalid selection or selection cancelled."
      end
    else
      card = find_preferred_card
      if card
        set_audio(card, card.active_profile)
        puts "Set audio to card: #{card.name}, profile: #{card.active_profile}"
      else
        puts "No suitable audio card found."
      end
    end
  end
end

# Parse command-line options
options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: audio_switcher.rb [options]"

  opts.on("-m", "--manual", "Manually select card and profile") do
    options[:manual] = true
  end
end.parse!

cards = Open3.capture3("pactl list cards")
cards = cards[0].split("\n\n")

class Card
  attr_reader :active_profile, :profiles, :name, :readable_name
  def initialize(string)
    lines = string.split("\n")
    @name = lines[1].split(": ").last.strip
    @readable_name = lines.find { |x| x.include?("device.description") }.split(" = ").last.strip
    profile_line = lines.find { |x| x.include?("Profile") }
    profile_line_index = lines.index(profile_line)
    active_profile_line = lines.find { |x| x.include?("Active Profile") }
    active_profile_line_index = lines.index(active_profile_line)
    profiles = lines[profile_line_index + 1..active_profile_line_index - 1]
    parsed_profiles = profiles.map do |profile|
      name = profile.split(": ").first.strip
      available = profile.split(": ").last.strip.tr(')', '')
      { name: name, available: available }
    end

    @active_profile = active_profile_line.split(": ").last.strip
    @profiles = parsed_profiles
  end
end

real_cards = cards.map { |card| Card.new(card) }

switcher = AudioSwitcher.new(real_cards)
switcher.run(manual: options[:manual])
